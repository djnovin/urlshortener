generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  profile Profile?

  // URLs this user created or last updated
  createdUrls Url[] @relation("UrlCreatedBy")
  updatedUrls Url[] @relation("UrlUpdatedBy")

  // Teams and shared URL access
  memberships TeamMember[]
  sharedUrls  UrlUser[]
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  name      String?
  avatarUrl String?
  bio       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Url {
  id          String    @id @default(uuid())
  originalUrl String
  shortUrl    String
  clicks      Int       @default(0)
  expiredAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // UTM tracking
  utmId String?
  utm   UTM?    @relation(fields: [utmId], references: [id], onDelete: SetNull)

  // Audit tracking
  createdById String?
  createdBy   User?   @relation("UrlCreatedBy", fields: [createdById], references: [id])

  updatedById String?
  updatedBy   User?   @relation("UrlUpdatedBy", fields: [updatedById], references: [id])

  // Team context
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  // Access control and tracking
  clicksLog Click[]
  owners    UrlUser[] // shared ownership
}

model UrlUser {
  id     String   @id @default(uuid())
  urlId  String
  userId String
  role   UserRole @default(VIEWER)

  url  Url  @relation(fields: [urlId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Click {
  id        String   @id @default(uuid())
  urlId     String
  country   String?
  city      String?
  ip        String?
  userAgent String?
  timestamp DateTime @default(now())

  url Url @relation(fields: [urlId], references: [id], onDelete: Cascade)
}

model UTM {
  id       String  @id @default(uuid())
  source   String?
  medium   String?
  campaign String?
  term     String?
  content  String?
  ref      String?

  urls Url[]
}

model Team {
  id      String       @id @default(uuid())
  name    String
  members TeamMember[]
  urls    Url[]
}

model TeamMember {
  id     String   @id @default(uuid())
  teamId String
  userId String
  role   TeamRole @default(MEMBER)

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

enum UserRole {
  OWNER
  EDITOR
  VIEWER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}
